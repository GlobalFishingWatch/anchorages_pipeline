#StandardSql
#
# Generate a voyages table, using the query generated by Nate and Tim
# For reference check:
# https://github.com/GlobalFishingWatch/GFW-Tasks/issues/1034
#

#
# Get a map of ssvid to vessel_id
#
with ssvid_map as (
  select
		ANY_VALUE(ssvid) as ssvid,
		vessel_id
  from `{{ dataset }}.vessel_info`
  group by vessel_id
),

#
# Get all port visits and include the vessel-id from the map created above
#
all_port_visits_with_vessel_id as (
  SELECT
		ssvid, start_anchorage_id,
		start_timestamp,
		end_anchorage_id,
		end_timestamp
  from `{{ dataset }}.{{ port_visits_table }}_*`
  join ssvid_map
		using (vessel_id)
),

#
# Get all port entries
#
entries as (
  SELECT
		ssvid, 
		start_anchorage_id as anchorage_id,
		start_timestamp as timestamp
  from all_port_visits_with_vessel_id 
),

#
# Get all port exits
#
exits as (
  SELECT
		ssvid, 
		end_anchorage_id as anchorage_id,
		end_timestamp as timestamp 
  from all_port_visits_with_vessel_id
),

#
# Generate pairs of port entries and exits taking into account the
# timestamp of the events
#
pairs as (
  select
		ssvid,
		exits.timestamp as exit,
		entries.timestamp as entry,
    exits.anchorage_id as exit_id,
		entries.anchorage_id as entry_id
  from exits
	join entries
		using (ssvid)
  where entries.timestamp > exits.timestamp
),

ranked as (
  select
		ssvid,
		exit, entry,
		exit_id,
		entry_id,
		row_number() over (partition by ssvid, exit order by entry asc) as rn
  from pairs
)

select
	ssvid,
	exit as trip_start,
	entry as trip_end, 
  exit_id as trip_start_anchorage_id,
	entry_id as trip_end_anchorage_id, 
  concat(
		ssvid,
		'-',
		format('%012x', timestamp_diff(exit, timestamp('1970-01-01'), MILLISECOND))
	) as trip_id
from ranked
where rn = 1
order by ssvid, trip_start