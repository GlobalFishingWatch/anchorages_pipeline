#StandardSql
#
# Generate a voyages table, using the query generated by Nate and Tim
# For reference check:
# https://github.com/GlobalFishingWatch/GFW-Tasks/issues/1034
#

#
# Get a map of ssvid to vessel_id
#
with ssvid_map as (
  select
    ANY_VALUE(ssvid) as ssvid,
    vessel_id
  from `{{ dataset }}.vessel_info`
  group by vessel_id
),

#
# Get all port visits and include the vessel-id from the map created above
#
all_real_port_visits_with_vessel_id as (
  SELECT
    ssvid, start_anchorage_id,
    start_timestamp,
    end_anchorage_id,
    end_timestamp
  from `{{ dataset }}.{{ port_visits_table }}*`
  join ssvid_map
    using (vessel_id)
),

dummy_initial_port_visits_with_vessel_id as (
  select
    ssvid,
    'NO_PREVIOUS_DATA' as start_anchorage_id,
    timestamp('0001-2-3') as start_timestamp,
    'NO_PREVIOUS_DATA' as end_anchorage_id,
    timestamp('0001-2-3') as end_timestamp
  from (select distinct ssvid from ssvid_map)
),

dummy_final_port_visits_with_vessel_id as (
  select
    ssvid,
    'ACTIVE_VOYAGE' as start_anchorage_id,
    timestamp('9999-9-9') as start_timestamp,
    'ACTIVE_VOYAGE' as end_anchorage_id,
    timestamp('9999-9-10') as end_timestamp
  from (select distinct ssvid from ssvid_map)
),

all_port_visits_with_vessel_id as (
select * from 
(select * from dummy_initial_port_visits_with_vessel_id)
union all
(select * from dummy_final_port_visits_with_vessel_id)
union all
(select * from all_real_port_visits_with_vessel_id)
),

#
# Get all port entries
#
entries as (
  SELECT
    ssvid, 
    start_anchorage_id as anchorage_id,
    start_timestamp as timestamp
  from all_port_visits_with_vessel_id 
),

#
# Get all port exits
#
exits as (
  SELECT
    ssvid, 
    end_anchorage_id as anchorage_id,
    end_timestamp as timestamp 
  from all_port_visits_with_vessel_id
),

#
# Generate pairs of port entries and exits taking into account the
# timestamp of the events
#
pairs as (
  select
    ssvid,
    exits.timestamp as exit,
    entries.timestamp as entry,
    exits.anchorage_id as exit_id,
    entries.anchorage_id as entry_id
  from exits
    join entries
    using (ssvid)
  where entries.timestamp > exits.timestamp
  and not (exits.anchorage_id = 'NO_PREVIOUS_DATA' and
           entries.anchorage_id = 'ACTIVE_VOYAGE')
),

ranked as (
  select
    ssvid,
    exit, entry,
    exit_id,
    entry_id,
    row_number() over (partition by ssvid, exit order by entry asc) as rn
  from pairs
)

select
  ssvid,
  exit as trip_start,
  entry as trip_end, 
  exit_id as trip_start_anchorage_id,
  entry_id as trip_end_anchorage_id,
  concat(
    ssvid,
    '-',
    format('%012x', timestamp_diff(exit, timestamp('1970-01-01'), MILLISECOND))
  ) as trip_id
from ranked
where rn = 1