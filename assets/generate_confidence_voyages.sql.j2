#StandardSql
#
# Generate a voyages table, using the query generated by Nate and Tim
# For reference check:
# https://github.com/GlobalFishingWatch/GFW-Tasks/issues/1034
#

#
# Get a map of ssvid to vessel_id
#
with

  #
  # Get all port visits and include the vessel-id from the map created above
  #
  all_real_port_visits AS (
  SELECT
    ssvid,
    vessel_id,
    start_anchorage_id,
    visit_id,
    start_timestamp,
    end_anchorage_id,
    end_timestamp,
    confidence
  FROM
    `{{ port_visits_table }}`
  WHERE
    confidence >= {{ min_confidence }} ),

  dummy_initial_port_visits AS (
  SELECT
    ssvid,
    vessel_id,
    'NO_PREVIOUS_DATA' AS start_anchorage_id,
    'NO_PREVIOUS_DATA' AS visit_id,
    TIMESTAMP('0001-2-3') AS start_timestamp,
    'NO_PREVIOUS_DATA' AS end_anchorage_id,
    TIMESTAMP('0001-2-3') AS end_timestamp,
    NULL AS confidence
  FROM (
    SELECT
      ssvid,
      vessel_id
    FROM
      all_real_port_visits
    GROUP BY
      1,
      2) ),

  dummy_final_port_visits AS (
  SELECT
    ssvid,
    vessel_id,
    'ACTIVE_VOYAGE' AS start_anchorage_id,
    'ACTIVE_VOYAGE' AS visit_id,
    TIMESTAMP('9999-9-9') AS start_timestamp,
    'ACTIVE_VOYAGE' AS end_anchorage_id,
    TIMESTAMP('9999-9-10') AS end_timestamp,
    NULL AS confidence
  FROM (
    SELECT
      ssvid,
      vessel_id
    FROM
      all_real_port_visits
    GROUP BY
      1,
      2) ),

  all_port_visits AS (
  SELECT
    *
  FROM (
    SELECT
      *
    FROM
      dummy_initial_port_visits)
  UNION ALL (
    SELECT
      *
    FROM
      dummy_final_port_visits)
  UNION ALL (
    SELECT
      *
    FROM
      all_real_port_visits) ),

  #
  # Get all port entries
  #
  entries AS (
  SELECT
    ssvid,
    vessel_id,
    start_anchorage_id AS anchorage_id,
    visit_id,
    start_timestamp AS timestamp,
    confidence
  FROM
    all_port_visits ),

  #
  # Get all port exits
  #
  exits AS (
  SELECT
    ssvid,
    vessel_id,
    end_anchorage_id AS anchorage_id,
    visit_id,
    end_timestamp AS timestamp,
    confidence
  FROM
    all_port_visits ),

  #
  # Generate pairs of port entries and exits taking into account the
  # timestamp of the events
  #
  pairs AS (
  SELECT
    ssvid,
    vessel_id vessel_id,
    exits.timestamp AS exit,
    entries.timestamp AS entry,
    exits.anchorage_id AS exit_id,
    entries.anchorage_id AS entry_id,
    exits.visit_id AS exit_visit_id,
    entries.visit_id AS entry_visit_id,
    entries.confidence AS entry_confidence,
    exits.confidence AS exit_confidence
  FROM
    exits
  JOIN
    entries
  USING
    (ssvid,
      vessel_id)
  WHERE
    entries.timestamp > exits.timestamp
    AND NOT ( exits.anchorage_id = 'NO_PREVIOUS_DATA'
      AND entries.anchorage_id = 'ACTIVE_VOYAGE' ) ),

  ranked AS (
  SELECT
    ssvid,
    vessel_id,
    exit,
    entry,
    exit_id,
    entry_id,
    exit_visit_id,
    entry_visit_id,
    entry_confidence,
    exit_confidence,
    ROW_NUMBER() OVER (PARTITION BY vessel_id, exit ORDER BY entry ASC) AS rn
  FROM
    pairs )

SELECT
  ssvid,
  vessel_id,
  exit AS trip_start,
  entry AS trip_end,
  exit_id AS trip_start_anchorage_id,
  entry_id AS trip_end_anchorage_id,
  exit_visit_id AS trip_start_visit_id,
  entry_visit_id AS trip_end_visit_id,
  exit_confidence AS trip_start_confidence,
  entry_confidence AS trip_end_confidence,
  CONCAT( ssvid, '-', vessel_id, '-', FORMAT('%012x', TIMESTAMP_DIFF(exit, TIMESTAMP('1970-01-01'), MILLISECOND)) ) AS trip_id
FROM
  ranked
WHERE
  rn = 1
